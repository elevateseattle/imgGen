name: Generate Image
on:
  workflow_dispatch:
    inputs:
      text:
        description: 'Text to convert to image'
        required: true
      bgcolor:
        description: 'Background color of the image'
        required: true
      fontcolor:
        description: 'Color of the font'
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Generate Image
      env:
        INPUT_TEXT: ${{ github.event.inputs.text }}
        INPUT_BGCOLOR: ${{ github.event.inputs.bgcolor }}
        INPUT_FONTCOLOR: ${{ github.event.inputs.fontcolor }}
      run: |
        npm install canvas
        node -e "
          const { createCanvas, loadImage } = require('canvas');
          const fs = require('fs');
          const text = process.env.INPUT_TEXT;
          const bgcolor = process.env.INPUT_BGCOLOR;
          const fontcolor = process.env.INPUT_FONTCOLOR;
          const filename = text.replace(/,/g, '').replace(/\s+/g, '_').toLowerCase() + '.jpg';
          
          const fonts = ['Arial', 'Helvetica', 'Times New Roman', 'Courier', 'Verdana', 'Georgia', 'Palatino', 'Garamond', 'Bookman', 'Comic Sans MS', 'Trebuchet MS', 'Arial Black', 'Impact'];
          const randomFont = fonts[Math.floor(Math.random() * fonts.length)];
          
          const canvas = createCanvas(250, 100);
          const ctx = canvas.getContext('2d');
          
          async function generateImage() {
            // Draw background
            ctx.fillStyle = bgcolor;
            ctx.fillRect(0, 0, 250, 100);
            
            // Load and draw logos
            const logo = await loadImage('logo - no bg.png');
            for (let i = 0; i < 5; i++) {
              const x = Math.random() * 250;
              const y = Math.random() * 100;
              const rotation = Math.random() * Math.PI * 2;
              const scale = 0.2 + Math.random() * 0.3;
              
              ctx.save();
              ctx.translate(x, y);
              ctx.rotate(rotation);
              ctx.scale(scale, scale);
              ctx.drawImage(logo, -logo.width / 2, -logo.height / 2);
              ctx.restore();
            }
            
            // Draw text
            ctx.font = '22px ' + randomFont;  // Increased font size by 4 points
            ctx.fillStyle = fontcolor;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            function wrapText(context, text, x, y, maxWidth, lineHeight) {
              const words = text.split(' ');
              let lines = [];
              let currentLine = words[0];

              for (let i = 1; i < words.length; i++) {
                const word = words[i];
                const width = context.measureText(currentLine + ' ' + word).width;
                if (width < maxWidth) {
                  currentLine += ' ' + word;
                } else {
                  lines.push(currentLine);
                  currentLine = word;
                }
              }
              lines.push(currentLine);

              // Calculate total height of text
              const totalHeight = lines.length * lineHeight;
              // Calculate starting Y position to center text vertically
              let startY = y - (totalHeight / 2) + (lineHeight / 2);

              for (let i = 0; i < lines.length; i++) {
                context.fillText(lines[i], x, startY);
                startY += lineHeight;
              }
            }
            
            wrapText(ctx, text, 125, 50, 230, 26);  // Centered position and adjusted line height
            
            const buffer = canvas.toBuffer('image/jpeg');
            fs.mkdirSync('generated_images', { recursive: true });
            fs.writeFileSync('generated_images/' + filename, buffer);
            
            console.log('Selected font: ' + randomFont);
            console.log('Background color: ' + bgcolor);
            console.log('Font color: ' + fontcolor);
          }
          
          generateImage().catch(console.error);
        "
    - name: Commit and push the image
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git add generated_images/*.jpg
        git commit -m "Generated image with words in filename"
        git push origin main
