name: Generate Image
on:
  workflow_dispatch:
    inputs:
      text:
        description: 'Text to convert to image'
        required: true
      bgcolor:
        description: 'Background color of the image'
        required: true
      fontcolor:
        description: 'Color of the font'
        required: true
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Install Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    - name: Generate Image
      env:
        INPUT_TEXT: ${{ github.event.inputs.text }}
        INPUT_BGCOLOR: ${{ github.event.inputs.bgcolor }}
        INPUT_FONTCOLOR: ${{ github.event.inputs.fontcolor }}
      run: |
        npm init -y
        npm install canvas
        node -e "
          const { createCanvas, loadImage } = require('canvas');
          const fs = require('fs');
          const text = process.env.INPUT_TEXT;
          const bgcolor = process.env.INPUT_BGCOLOR;
          const fontcolor = process.env.INPUT_FONTCOLOR;
          const filename = text.replace(/,/g, '').replace(/\s+/g, '_').toLowerCase() + '.jpg';
          
          const fonts = ['Arial', 'Helvetica', 'Times New Roman', 'Courier', 'Verdana', 'Georgia', 'Palatino', 'Garamond', 'Bookman', 'Comic Sans MS', 'Trebuchet MS', 'Arial Black', 'Impact', 'Frutiger', 'Bodoni', 'Futura', 'Akzidenz Grotesk', 'Officina', 'Gill Sans', 'Univers', 'Optima', 'Franklin Gothic', 'Bembo', 'Interstate', 'Thesis', 'Rockwell', 'Walbaum', 'Meta', 'Trinit√©', 'Din', 'Matrix', 'OCR', 'Avant Garde', 'Lucida', 'Sabon', 'Zapfino', 'Letter Gothic', 'Stone', 'Arnhem', 'Minion', 'Myriad', 'Rotis', 'Eurostile', 'Scala', 'Syntax', 'Joanna', 'Fleishmann', 'Baskerville', 'Fedra', 'Gotham', 'Lexicon', 'Hands', 'Metro', 'Didot', 'Formata', 'Caslon', 'Cooper Black', 'Peignot', 'Bell Gothic', 'Antique Olive', 'Wilhelm Klingspor Gotisch', 'Info', 'Dax', 'Proforma', 'Today Sans', 'Prokyon', 'Trade Gothic', 'Swift', 'Copperplate Gothic', 'Blur', 'Base', 'Bell Centennial', 'News Gothic', 'Avenir', 'Bernhard Modern', 'Amplitude', 'Trixie', 'Quadraat', 'Neutraface', 'Nobel', 'Industria', 'Bickham Script', 'Bank Gothic', 'Corporate ASE', 'Fago', 'Trajan', 'Kabel', 'House Gothic 23', 'Kosmik', 'Caecilia', 'Mrs Eaves', 'Corpid', 'Miller', 'Souvenir', 'Instant Types', 'Clarendon', 'Triplex', 'Benguiat', 'Zapf Renaissance', 'Filosofia', 'Chalet', 'Quay Sans', 'Cezanne', 'Reporter', 'Legacy', 'Agenda', 'Bello', 'Dalliance', 'Mistral'];
          const randomFont = fonts[Math.floor(Math.random() * fonts.length)];
          
          const canvas = createCanvas(250, 100);
          const ctx = canvas.getContext('2d');
          
          async function generateImage() {
            // Draw background
            ctx.fillStyle = bgcolor;
            ctx.fillRect(0, 0, 250, 100);
            
            // Load and draw logos
            try {
              const logo = await loadImage('logo - no bg.png');
              for (let i = 0; i < 5; i++) {
                const x = Math.random() * 250;
                const y = Math.random() * 100;
                const rotation = Math.random() * Math.PI * 2;
                const scale = 0.2 + Math.random() * 0.3;
                
                ctx.save();
                ctx.translate(x, y);
                ctx.rotate(rotation);
                ctx.scale(scale, scale);
                ctx.drawImage(logo, -logo.width / 2, -logo.height / 2);
                ctx.restore();
              }
            } catch (error) {
              console.error('Error loading logo:', error);
            }
            
            // Draw text
            ctx.font = '22px ' + randomFont;
            ctx.fillStyle = fontcolor;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            function wrapText(context, text, x, y, maxWidth, lineHeight) {
              const words = text.split(' ');
              let lines = [];
              let currentLine = words[0];

              for (let i = 1; i < words.length; i++) {
                const word = words[i];
                const width = context.measureText(currentLine + ' ' + word).width;
                if (width < maxWidth) {
                  currentLine += ' ' + word;
                } else {
                  lines.push(currentLine);
                  currentLine = word;
                }
              }
              lines.push(currentLine);

              const totalHeight = lines.length * lineHeight;
              let startY = y - (totalHeight / 2) + (lineHeight / 2);

              for (let i = 0; i < lines.length; i++) {
                context.fillText(lines[i], x, startY);
                startY += lineHeight;
              }
            }
            
            wrapText(ctx, text, 125, 50, 230, 26);
            
            const buffer = canvas.toBuffer('image/jpeg');
            fs.mkdirSync('generated_images', { recursive: true });
            fs.writeFileSync('generated_images/' + filename, buffer);
            
            console.log('Selected font: ' + randomFont);
            console.log('Background color: ' + bgcolor);
            console.log('Font color: ' + fontcolor);
            console.log('Generated image: ' + filename);
          }
          
          generateImage().catch(console.error);
        "
    - name: Commit and push the image
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --global user.email "action@github.com"
        git config --global user.name "GitHub Action"
        git add package.json package-lock.json generated_images/*.jpg
        git commit -m "Generated image and updated dependencies"
        git push origin main
